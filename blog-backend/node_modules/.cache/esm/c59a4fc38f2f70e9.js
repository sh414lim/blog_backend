let Post;_8f2‍.x([["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_8f2‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);

       const write =async ctx =>{
    const{title,body,tags}=ctx.request.body;
    const post=new Post({
        title,
        body,
        tags
    });
    try{
        await post.save();
        ctx.body=post;
    }catch(e){
        ctx.throw(500,e)
    }
};



       const list=async ctx=>{
try{
    const posts=await Post.find().exec();
    ctx.body=posts;
}catch(e){
    ctx.throw(500,e);
}

}

       const read= async ctx=>{
const {id} =ctx.params;
try{
    const post=await Post.findById(id).exec();
    if(!post){
        ctx.status=404;
        return;
    }
    ctx.body=post;
}catch(e){
    ctx.throw(500,e)
}


}

       const remove= async ctx=>{
    const {id}=ctx.params;
    try{
        await Post.findByIdAndRemove(id).exec();  //해당 아이디 삭제
        ctx.status=204;  //No Content(성공하기는 했지만 응답할 데이터는 없음)
    }catch (e){
        ctx.throw(500,exports)
    }

}


//findByIdAndUpdate ㅎ마수를 사용할때는 세가지 파라미터를 주어야 한다
//첫번째 파라미터는 id
//두번째 파라미터는 업데이트 내용
//세번째 파라미터는 업데이트의 옵션

       const update=async ctx=>{
    const{id}=ctx.params;
    try{
        const post=await Post.findByIdAndUpdate(id,ctx.request.body,{
            new:true, //이 값을설정하면 업데이트된 데이터를 반환한다.
        }).exec();
        if(!post){
            ctx.status=404;
            return;
        }
        ctx.body=post;

    }catch (e){
        ctx.throw(500,e)
    }

}