let mongoose,Schema,bcrypt,jwt;_e3d‍.x([["default",()=>_e3d‍.o]]);_e3d‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}],["Schema",["Schema"],function(v){Schema=v}]]);_e3d‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_e3d‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);



const UserSchema=new Schema({
    username:String,
    hashedPassword:String,
});

UserSchema.methods.setPassword = async function(password){
    const hash=await bcrypt.hash(password,10);
    this.hashedPassword =hash;
}

UserSchema.methods.checkPassword=async function(password){
    const result =await bcrypt.compare(password, this.hashedPassword);
    return result; //true //false
};

UserSchema.statics.findByUsername=async function(username){
    return this.findOne({username});
}
UserSchema.methods.serialize = function(){
    const data = this.toJSON();
    delete data.hashedPassword;
    return data;
}

UserSchema.methods.generateToken=function() {
    const token=jwt.sign(
        //첫번쨰 파라미터에는 토큰안에 집어넣고 싶은 데이터를 넣는다
        {
            _id:this.id,
            username:this.username,
        },
        process.env.JWT_SECRET, // 두 번째 파라미터에는 JWT 암호를 넣는다
        {
            expiresIn:"7d",//7일 동안 유효하다
        },
    );
    return token;
}


const User=mongoose.model('User',UserSchema);
_e3d‍.d(User);